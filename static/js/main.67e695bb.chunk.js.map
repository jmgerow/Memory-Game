{"version":3,"sources":["components/Container/Container.js","components/GameCards/GameCards.js","components/Scoreboard/Scoreboard.js","components/Wrapper/Wrapper.js","components/Hero/Hero.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","GameCards","value","id","onClick","selectCard","alt","name","src","image","Scoreboard","class","currentScore","topScore","Wrapper","Hero","style","backgroundImage","concat","App","state","friends","selected","_this","indexOf","addToCurrentScore","setState","alert","resetGame","console","log","runRandomize","shuffledCards","array","i","length","j","Math","floor","random","_ref","randomizeCards","_this2","this","components_Wrapper_Wrapper","components_Scoreboard_Scoreboard","components_Hero_Hero","components_Container_Container","map","friend","components_GameCards_GameCards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67e695bb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => <div className=\"container\">{props.children}</div>;\n\nexport default Container;\n","import React from \"react\";\nimport \"./GameCards.css\";\n\nconst GameCards = props => (\n  <div className=\"card\"\n    value={props.id}\n    onClick={() => props.selectCard(props.id)}\n  >\n\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n\n  </div>\n);\n\nexport default GameCards;\n","import React from \"react\";\nimport \"./Scoreboard.css\";\n\nconst Scoreboard = props => (\n \n    <div class=\"navbar sticky-top scoreboard\">\n      <div class=\"col-sm-8 game-name\">React Memory Game</div>  \n      <div class=\"col-sm-2 current-score\">Current Score: {props.currentScore}</div>\n      <div class=\"col-sm-2\">Top Score: {props.topScore}</div>\n    </div>\n  \n);\n\nexport default Scoreboard;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"container-fluid\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Hero.css\";\n\nconst Hero = props => (\n  <div className=\"hero text-center\" style={{ backgroundImage: `url(${props.backgroundImage})` }}>\n    {props.children}\n  </div>\n);\n\nexport default Hero;\n","import React, { Component } from 'react';\nimport './App.css';\n// import Header from \"./components/Header\";\nimport Container from \"./components/Container\";\nimport GameCards from \"./components/GameCards\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport Wrapper from \"./components/Wrapper\";\nimport friends from \"./characters.json\";\nimport Hero from \"./components/Hero\";\n\n//function for randomizing how cards are displayed\nfunction randomizeCards(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n\n  // setting default state values\n  state = {\n    friends,\n    currentScore: 0,\n    topScore: 0,\n    selected: []\n\n  };\n\n  // function for when user clicks card\n  selectCard = id => {\n    if (this.state.selected.indexOf(id) === -1) {\n      this.addToCurrentScore();\n      this.setState({ selected: this.state.selected.concat(id) });\n    } else {\n      alert(\"you lose!\")\n      this.resetGame();\n    };\n    // console.log('selectedFriend', selectedFriend)\n    // console.log(\"id\", friends.id)\n    //  this.setState({ friends });\n\n    console.log('selected', this.state.selected)\n    this.runRandomize()\n  };\n\n  // randomizes cards when called\n  runRandomize = () => {\n    let shuffledCards = randomizeCards(friends);\n    this.setState({ friends: shuffledCards });\n  };\n\n  // adds to current score if necessary\n  addToCurrentScore = () => {\n    this.setState({ currentScore: this.state.currentScore + 1 });\n\n    if (this.state.currentScore >= this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 });\n    };\n    if (this.state.currentScore === 11) {\n      alert(\"winner winner chicken dinner!\")\n      this.resetGame();\n    };\n  };\n\n  // resets game\n  resetGame = () => {\n    this.setState({ currentScore: 0 });\n    this.setState({ selected: [] });\n\n  };\n\n  // rendering to dom\n  render() {\n    return (\n      <Wrapper>\n        <Scoreboard\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Hero backgroundImage=\"\">\n          <h1>React Memory Game</h1>\n          <h2>To begin, click on any tile. Try to click all of them without clicking the same one twice. Good luck!</h2>\n        </Hero>\n        <Container>\n\n\n\n          {this.state.friends.map(friend => (\n            <GameCards\n              selectCard={this.selectCard}\n              id={friend.id}\n              key={friend.id}\n              image={friend.image}\n            />\n          ))}\n        </Container>\n      </Wrapper>\n    );\n  };\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}