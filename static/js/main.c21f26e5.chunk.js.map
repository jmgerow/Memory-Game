{"version":3,"sources":["components/Header/Title.js","components/Container/Container.js","components/GameCards/GameCards.js","components/Scoreboard/Scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","children","Container","GameCards","value","id","onClick","selectCard","alt","name","src","image","Scoreboard","currentScore","topScore","App","state","friends","selected","_this","indexOf","addToCurrentScore","setState","concat","console","log","resetGame","runRandomize","shuffledCards","array","i","length","j","Math","floor","random","_ref","randomizeCards","_this2","this","components_Container_Container","components_Scoreboard_Scoreboard","components_Header_Title","map","friend","components_GameCards_GameCards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"inFAKeA,eAFD,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMK,YCErCC,SAFG,SAAAN,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMK,YCa9CE,SAbG,SAAAP,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbI,MAAOR,EAAMS,GACbC,QAAS,kBAAMV,EAAMW,WAAWX,EAAMS,MAGtCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKS,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,YCCxBC,SARI,SAAAhB,GAAK,OACtBC,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,OAAKM,GAAG,iBAAR,kBAAyCT,EAAMiB,cAC/ChB,EAAAC,EAAAC,cAAA,OAAKM,GAAG,aAAR,cAAiCT,EAAMkB,wBCyF7BC,6MA1EbC,MAAQ,CACNC,UACAJ,aAAc,EACdC,SAAU,EACVI,SAAU,MAKZX,WAAa,SAAAF,IAC8B,IAArCc,EAAKH,MAAME,SAASE,QAAQf,IAC9Bc,EAAKE,oBACLF,EAAKG,SAAS,CAAEJ,SAAUC,EAAKH,MAAME,SAASK,OAAOlB,OAErDmB,QAAQC,IAAI,aACZN,EAAKO,aAMPF,QAAQC,IAAI,WAAYN,EAAKH,MAAME,UACnCC,EAAKQ,kBAIPA,aAAe,WACb,IAAIC,EAvCR,SAAwBC,GACtB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,GAI3C,OAAOP,EAkCeQ,CAAepB,GACnCE,EAAKG,SAAS,CAAEL,QAASW,OAI3BP,kBAAoB,WAClBF,EAAKG,SAAS,CAAET,aAAcM,EAAKH,MAAMH,aAAe,IAEpDM,EAAKH,MAAMH,cAAgBM,EAAKH,MAAMF,UACxCK,EAAKG,SAAS,CAAER,SAAUK,EAAKH,MAAMF,SAAW,IAElB,KAA5BK,EAAKH,MAAMH,eACbW,QAAQC,IAAI,iCACZN,EAAKO,gBAKTA,UAAY,WACVP,EAAKG,SAAS,CAAET,aAAc,IAC9BM,EAAKG,SAAS,CAAEJ,SAAU,8EAKnB,IAAAoB,EAAAC,KACP,OACE1C,EAAAC,EAAAC,cAACyC,EAAD,KACE3C,EAAAC,EAAAC,cAAC0C,EAAD,CACE5B,aAAc0B,KAAKvB,MAAMH,aACzBC,SAAUyB,KAAKvB,MAAMF,WAEvBjB,EAAAC,EAAAC,cAAC2C,EAAD,0BAECH,KAAKvB,MAAMC,QAAQ0B,IAAI,SAAAC,GAAM,OAC5B/C,EAAAC,EAAAC,cAAC8C,EAAD,CACEtC,WAAY+B,EAAK/B,WACjBF,GAAIuC,EAAOvC,GACXyC,IAAKF,EAAOvC,GACZM,MAAOiC,EAAOjC,kBArERoC,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c21f26e5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n","import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => <div className=\"container\">{props.children}</div>;\n\nexport default Container;\n","import React from \"react\";\nimport \"./GameCards.css\";\n\nconst GameCards = props => (\n  <div className=\"card\"\n    value={props.id}\n    onClick={() => props.selectCard(props.id)}\n  >\n\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n\n  </div>\n);\n\nexport default GameCards;\n","import React from \"react\";\nimport \"./Scoreboard.css\";\n\nconst Scoreboard = props => (\n  <div>\n     <div id=\"current-score\">Current Score: { props.currentScore }</div>     \n     <div id=\"top-score\">Top Score: { props.topScore }</div> \n    \n  </div>\n);\n\nexport default Scoreboard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Container from \"./components/Container\";\nimport GameCards from \"./components/GameCards\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport friends from \"./characters.json\";\n\n//function for randomizing how cards are displayed\nfunction randomizeCards(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n\nclass App extends Component {\n\n  // setting default state values\n  state = {\n    friends,\n    currentScore: 0,\n    topScore: 0,\n    selected: []\n    \n  };\n\n  // function for when user clicks card\n  selectCard = id => {\n    if (this.state.selected.indexOf(id) === -1) {\n      this.addToCurrentScore();\n      this.setState({ selected: this.state.selected.concat(id) });\n    } else {\n      console.log(\"you lose!\")\n      this.resetGame();\n    };\n    // console.log('selectedFriend', selectedFriend)\n    // console.log(\"id\", friends.id)\n    //  this.setState({ friends });\n    \n    console.log('selected', this.state.selected)\n    this.runRandomize()\n  };\n\n  // randomizes cards when called\n  runRandomize = () => {\n    let shuffledCards = randomizeCards(friends);\n    this.setState({ friends: shuffledCards });\n  };\n\n  // adds to current score if necessary\n  addToCurrentScore = () => {\n    this.setState({ currentScore: this.state.currentScore + 1 });\n\n    if (this.state.currentScore >= this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 });\n    };\n    if (this.state.currentScore === 11 ) {\n      console.log(\"winner winner chicken dinner!\")\n      this.resetGame();\n    };\n  };\n\n  // resets game\n  resetGame = () => {\n    this.setState({ currentScore: 0 });\n    this.setState({ selected: [] });\n\n  };\n\n  // rendering to dom\n  render() {\n    return (\n      <Container>\n        <Scoreboard\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n         />\n        <Header>React Memory Game</Header>\n        \n        {this.state.friends.map(friend => (\n          <GameCards\n            selectCard={this.selectCard}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Container>\n    );\n  };\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}